This is how we will make our Flutter google maps App

- First we will use the google-maps-flutter package to display the map
https://pub.dev/packages/google_maps_flutter


- Fetching data 
Data is expected in GeoJSON- like format with coordinates provided for each pollution region

We can use the http package to send the query in influx and retrieve the data 
import 'package:http/http.dart' as http;
import 'dart:convert';

Future<void> fetchData() async {
  final url = Uri.parse('https://us-west-2-1.aws.cloud2.influxdata.com/api/v2/query');
  final headers = {
    'Authorization': 'Token YOUR_API_TOKEN',
    'Content-Type': 'application/vnd.flux',
    'Accept': 'application/csv'
  };

  final query = '''
  from(bucket: "your_bucket_name")
    |> range(start: -1h)
    |> filter(fn: (r) => r._measurement == "air_quality")
  ''';

  final response = await http.post(url, headers: headers, body: query);
  if (response.statusCode == 200) {
    print(response.body);
    // Parse CSV data or convert it into a suitable format for display
  } else {
    print('Error: ${response.statusCode}');
  }
}


FILE STRUCTURE

Detailed Explanation
lib/main.dart:
This is the main entry point of your Flutter app.
It contains the code to:
Display a Google Map with pollution layers.
Fetch pollution data from an InfluxDB API using the http package.
Show a heatmap from Grafana using a WebView.
Allow toggling of different pollution data layers (car sensors, satellites, stations).
pubspec.yaml:
This file manages your app’s metadata and dependencies.
Important sections in this file:
name and description: Basic metadata about the app.
version: The current version of the app.
dependencies: Lists all the required packages for the app:
flutter: Core Flutter framework.
google_maps_flutter: Provides Google Maps integration.
http: Used to make HTTP requests to your InfluxDB API.
webview_flutter: Used to embed a WebView for the Grafana heatmap.
flutter: Specifies that the app uses material design.
ios/Runner/Info.plist:
This file contains configuration settings for the iOS version of your app.
The key section here:
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
This configuration allows the app to make HTTP requests to any endpoint, which is necessary if your InfluxDB or Grafana server doesn’t use HTTPS or has specific CORS requirements.












ANDROID SETUP
Steps to Run the App on Android
Set Up Flutter Development Environment:
Download and install Flutter SDK from the official Flutter website.
Install Android Studio and set it up with the necessary SDK tools and the Flutter/Dart plugins.
Make sure you have an Android device or an emulator set up.
Open the Project in an IDE:
Extract the provided zip file.
Open the folder in an IDE like Android Studio or VS Code.
Run flutter pub get in the terminal to download the dependencies listed in pubspec.yaml.
Connect an Android Device:
Enable developer mode and USB debugging on your Android phone.
Connect your phone to your computer using a USB cable.
Run flutter devices in the terminal to confirm that the device is recognized.
Run the App:
In the terminal, run:
flutter run
Alternatively, click the Run button in your IDE to build and deploy the app to your Android device or emulator.
Additional Configurations for Android
Permissions:
Android apps require explicit permissions for network access. Ensure that the following permissions are added to your AndroidManifest.xml file (located in android/app/src/main/AndroidManifest.xml):
<uses-permission android:name="android.permission.INTERNET"/>
CORS and HTTP Requests:
If your InfluxDB or Grafana instance uses plain HTTP (not HTTPS), you may need to configure the app to allow HTTP requests by adding this to your AndroidManifest.xml under the <application> tag:
<application
    android:usesCleartextTraffic="true"
    ... >
Testing on Android
Google Maps API Key:
Ensure you have a Google Maps API key configured in your AndroidManifest.xml. You can get a key from the Google Cloud Console.
Add the key like this:
<meta-data
    android:name="com.google.android.geo.API_KEY"
    android:value="YOUR_GOOGLE_MAPS_API_KEY"/>
Debugging:
Use Android Studio’s logcat feature to check for errors or issues during runtime.
You can also use flutter logs in the terminal to see real-time logs.